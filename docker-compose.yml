services:
  postgres:
    container_name: crm-db
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=crm_db
      - POSTGRES_USER=crm_user
      - POSTGRES_PASSWORD=crm_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crm_user -d crm_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - crm_network

  redis:
    container_name: crm-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - crm_network

  backend:
    container_name: crm-backend
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    volumes:
      - ./backend:/app/backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8000:8000"
    networks:
      - crm_network
    environment:
      - REDIS_URL=redis://redis:6379/0
    restart: unless-stopped

  frontend:
    container_name: crm-frontend
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - crm_network

  celery:
    container_name: crm-celery
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    command: celery -A config worker -l info
    volumes:
      - ./backend:/app/backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DATABASE_URL=postgres://crm_user:crm_password@postgres:5432/crm_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - crm_network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/postgres

networks:
  crm_network:
    driver: bridge